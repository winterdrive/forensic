"""
將BERT模型輸出結果與LLM模型判斷進行比較，並生成統計報告，以利用LLM檢視我們訓練的bert模型性能。

input:
### bert result (generated by data_game_2025/src/bert_model/run_inference_simple.py)
data_game_2025/data/results/vote/candidates/both_multiligual_20250727_0100.csv
檔案格式為：
| 欄位 | 說明 |
|------|------|
| `sms_id` | 簡訊 ID |
| `travel_prob` | 旅遊分類預測機率 |
| `label` | 旅遊分類預測結果（0: 非旅遊, 1: 旅遊）|
| `name_prob` | 姓名分類預測機率 |
| `name_flg` | 姓名分類預測結果（0: 非姓名, 1: 姓名）|

### llm result (generated by data_game_2025/src/llm_name_classifier.py or data_game_2025/src/llm_travel_classifier.py)
data_game_2025/data/results/labled/stage2/magistral_more_10000/name_mistralai_magistral-small_20250721_1855.csv
檔案格式為：
| 欄位 | 說明 |
|------|------|
| `sms_id` | 簡訊 ID |
| `name_flg` | 姓名分類預測結果（0: 非姓名, 1: 姓名）|

data_game_2025/data/results/labled/stage2/magistral_more_10000/travel_mistralai_magistral-small_20250710_2231.csv
檔案格式為：
| 欄位 | 說明 |
|------|------|
| `sms_id` | 簡訊 ID |
| `label` | 旅遊分類預測結果（0: 非旅遊, 1: 旅遊）|

output:
### llm compare result：用於抓出與bert模型預測結果不一致的樣本，一致的不用記錄
data_game_2025/data/results/vote/llm_compare_result.csv

檔案格式為：
| 欄位 | 說明 |
|------|------|
| `sms_id` | 簡訊 ID |
| `travel_prob` | 旅遊分類預測機率 |
| `label` | 旅遊分類預測結果（0: 非旅遊, 1: 旅遊）|
| `name_prob` | 姓名分類預測機率 |
| `name_flg` | 姓名分類預測結果（0: 非姓名, 1: 姓名）|
| `bert_travel_LLM` | LLM是否選中為旅遊類別 (1: 選中, 0: 未選中) |
| `bert_name_LLM` | LLM是否選中為姓名類別 (1: 選中, 0: 未選中) |
| `travel_conflict` | 旅遊分類衝突標記 (1: 衝突, 0: 無衝突) |
| `name_conflict` | 姓名分類衝突標記 (1: 衝突, 0: 無衝突) |
| `sms_body` | 簡訊內容(源自data_game_2025/data/raw/datagame_sms_stage1_raw_TEXT_ONLY.csv) |

"""

import pandas as pd
from pathlib import Path
import logging

# 設定日誌
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


class LLMBERTComparer:
    """LLM 與 BERT 模型結果比較器"""

    def __init__(self):
        """初始化比較器"""
        # 設定檔案路徑
        self.base_dir = Path(
            "/Users/winstontang/PycharmProjects/forensic/data_game_2025"
        )

        # BERT 結果檔案
        self.bert_result_file = (
            self.base_dir
            / "data/results/vote/candidates/both_multiligual_20250727_0100.csv"
        )

        # LLM 結果檔案
        self.llm_name_file = (
            self.base_dir
            / "data/results/labled/stage2/magistral_more_10000/name_mistralai_magistral-small_20250721_1855.csv"
        )
        self.llm_travel_file = (
            self.base_dir
            / "data/results/labled/stage2/magistral_more_10000/travel_mistralai_magistral-small_20250710_2231.csv"
        )

        # 原始簡訊內容
        self.sms_content_file = (
            self.base_dir / "data/raw/datagame_sms_stage1_raw_TEXT_ONLY.csv"
        )

        # 輸出檔案
        self.output_file = self.base_dir / "data/results/vote/llm_compare_result.csv"

        logger.info("LLM-BERT 比較器初始化完成")

    def load_bert_results(self) -> pd.DataFrame:
        """載入 BERT 結果"""
        logger.info("載入 BERT 結果...")

        bert_df = pd.read_csv(self.bert_result_file)
        logger.info(f"載入 BERT 結果: {len(bert_df)} 筆")

        return bert_df

    def load_llm_results(self) -> tuple:
        """載入 LLM 結果"""
        logger.info("載入 LLM 結果...")

        # 載入姓名分類結果
        llm_name_df = pd.read_csv(self.llm_name_file)
        logger.info(f"載入 LLM 姓名分類結果: {len(llm_name_df)} 筆")

        # 載入旅遊分類結果
        llm_travel_df = pd.read_csv(self.llm_travel_file)
        logger.info(f"載入 LLM 旅遊分類結果: {len(llm_travel_df)} 筆")

        return llm_name_df, llm_travel_df

    def load_sms_content(self) -> pd.DataFrame:
        """載入簡訊內容"""
        logger.info("載入簡訊內容...")

        sms_df = pd.read_csv(self.sms_content_file)
        logger.info(f"載入簡訊內容: {len(sms_df)} 筆")

        return sms_df

    def compare_results(self) -> pd.DataFrame:
        """比較 BERT 與 LLM 結果"""
        logger.info("開始比較 BERT 與 LLM 結果...")

        # 載入所有資料
        bert_df = self.load_bert_results()
        llm_name_df, llm_travel_df = self.load_llm_results()
        sms_df = self.load_sms_content()

        # 建立 LLM 選中的 sms_id 集合
        llm_travel_selected = set(llm_travel_df[llm_travel_df["label"] == 1]["sms_id"])
        llm_name_selected = set(llm_name_df[llm_name_df["name_flg"] == 1]["sms_id"])

        # 在 BERT 結果中標記 LLM 是否選中
        bert_df["bert_travel_LLM"] = bert_df["sms_id"].apply(
            lambda x: 1 if x in llm_travel_selected else 0
        )
        bert_df["bert_name_LLM"] = bert_df["sms_id"].apply(
            lambda x: 1 if x in llm_name_selected else 0
        )

        # 計算衝突
        # 旅遊分類衝突：BERT 認為是旅遊但 LLM 未選中，或 BERT 認為不是旅遊但 LLM 選中
        bert_df["travel_conflict"] = (
            (bert_df["label"] == 1) & (bert_df["bert_travel_LLM"] == 0)
        ) | ((bert_df["label"] == 0) & (bert_df["bert_travel_LLM"] == 1))

        # 姓名分類衝突：BERT 認為有姓名但 LLM 未選中，或 BERT 認為無姓名但 LLM 選中
        bert_df["name_conflict"] = (
            (bert_df["name_flg"] == 1) & (bert_df["bert_name_LLM"] == 0)
        ) | ((bert_df["name_flg"] == 0) & (bert_df["bert_name_LLM"] == 1))

        # 轉換衝突標記為整數
        bert_df["travel_conflict"] = bert_df["travel_conflict"].astype(int)
        bert_df["name_conflict"] = bert_df["name_conflict"].astype(int)

        # 合併簡訊內容
        if "sms_body" in sms_df.columns:
            sms_content_col = "sms_body"
        elif "body" in sms_df.columns:
            sms_content_col = "body"
        elif "text" in sms_df.columns:
            sms_content_col = "text"
        else:
            # 假設第二欄是簡訊內容
            sms_content_col = sms_df.columns[1]

        # 假設第一欄是 sms_id
        sms_id_col = sms_df.columns[0]

        # 重新命名以便合併
        sms_df_renamed = sms_df[[sms_id_col, sms_content_col]].rename(
            columns={sms_id_col: "sms_id", sms_content_col: "sms_body"}
        )

        # 合併簡訊內容
        result_df = bert_df.merge(sms_df_renamed, on="sms_id", how="left")

        # 統計衝突情況
        travel_conflicts = result_df["travel_conflict"].sum()
        name_conflicts = result_df["name_conflict"].sum()
        total_conflicts = (
            (result_df["travel_conflict"] == 1) | (result_df["name_conflict"] == 1)
        ).sum()

        logger.info(f"旅遊分類衝突: {travel_conflicts} 筆")
        logger.info(f"姓名分類衝突: {name_conflicts} 筆")
        logger.info(f"總衝突樣本: {total_conflicts} 筆")

        # 只返回有衝突的樣本
        conflict_df = result_df[
            (result_df["travel_conflict"] == 1) | (result_df["name_conflict"] == 1)
        ]
        logger.info(f"篩選出衝突樣本: {len(conflict_df)} 筆")

        return result_df, conflict_df

    def generate_conflict_analysis(self, result_df: pd.DataFrame) -> dict:
        """生成衝突分析統計"""
        analysis = {}

        # 基本統計
        analysis["total_samples"] = len(result_df)
        analysis["travel_conflicts"] = result_df["travel_conflict"].sum()
        analysis["name_conflicts"] = result_df["name_conflict"].sum()
        analysis["total_conflicts"] = (
            (result_df["travel_conflict"] == 1) | (result_df["name_conflict"] == 1)
        ).sum()

        # BERT 選中統計
        analysis["bert_travel_selected"] = (result_df["label"] == 1).sum()
        analysis["bert_name_selected"] = (result_df["name_flg"] == 1).sum()

        # LLM 正類統計
        analysis["llm_travel_positive"] = result_df["bert_travel_LLM"].sum()
        analysis["llm_name_positive"] = result_df["bert_name_LLM"].sum()

        # 一致性統計
        analysis["travel_agreement"] = (
            analysis["total_samples"] - analysis["travel_conflicts"]
        )
        analysis["name_agreement"] = (
            analysis["total_samples"] - analysis["name_conflicts"]
        )

        # 計算一致性比例
        analysis["travel_agreement_rate"] = (
            analysis["travel_agreement"] / analysis["total_samples"]
        )
        analysis["name_agreement_rate"] = (
            analysis["name_agreement"] / analysis["total_samples"]
        )

        return analysis

    def run_comparison(self) -> str:
        """執行完整的比較流程"""
        logger.info("開始執行 LLM-BERT 比較分析")

        # 執行比較
        result_df, conflict_df = self.compare_results()

        # 生成分析統計（基於完整資料）
        analysis = self.generate_conflict_analysis(result_df)

        # 儲存衝突結果（只包含有衝突的樣本）
        conflict_df.to_csv(self.output_file, index=False)
        logger.info(f"衝突樣本已儲存至: {self.output_file}")

        # 輸出統計摘要
        print("\n" + "=" * 60)
        print("📊 LLM-BERT 比較分析摘要")
        print("=" * 60)
        print(f"總樣本數: {analysis['total_samples']:,}")
        print(
            f"總衝突樣本: {analysis['total_conflicts']:,} ({analysis['total_conflicts']/analysis['total_samples']*100:.1f}%)"
        )
        print(f"輸出衝突檔案: {len(conflict_df):,} 筆")
        print()
        print("🎯 旅遊分類比較:")
        print(f"  BERT 正類: {analysis['bert_travel_selected']:,}")
        print(f"  LLM 選中: {analysis['llm_travel_positive']:,}")
        print(f"  衝突數量: {analysis['travel_conflicts']:,}")
        print(f"  一致性: {analysis['travel_agreement_rate']*100:.1f}%")
        print()
        print("👤 姓名分類比較:")
        print(f"  BERT 正類: {analysis['bert_name_selected']:,}")
        print(f"  LLM 選中: {analysis['llm_name_positive']:,}")
        print(f"  衝突數量: {analysis['name_conflicts']:,}")
        print(f"  一致性: {analysis['name_agreement_rate']*100:.1f}%")
        print("=" * 60)

        return str(self.output_file)


def main():
    """主函數"""
    try:
        comparer = LLMBERTComparer()
        output_file = comparer.run_comparison()
        print(f"\n✅ 比較分析完成！結果檔案: {output_file}")

    except Exception as e:
        logger.error(f"執行失敗: {str(e)}")
        raise


if __name__ == "__main__":
    main()
